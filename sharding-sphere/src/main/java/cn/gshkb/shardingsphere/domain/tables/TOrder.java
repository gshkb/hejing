/*
 * This file is generated by jOOQ.
 */
package cn.gshkb.shardingsphere.domain.tables;


import cn.gshkb.shardingsphere.domain.Ds;
import cn.gshkb.shardingsphere.domain.Indexes;
import cn.gshkb.shardingsphere.domain.Keys;
import cn.gshkb.shardingsphere.domain.tables.records.TOrderRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 订单
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TOrder extends TableImpl<TOrderRecord> {

    private static final long serialVersionUID = 1361748736;

    /**
     * The reference instance of <code>ds.t_order</code>
     */
    public static final TOrder T_ORDER = new TOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TOrderRecord> getRecordType() {
        return TOrderRecord.class;
    }

    /**
     * The column <code>ds.t_order.id</code>. 主键
     */
    public final TableField<TOrderRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>ds.t_order.name</code>. 姓名
     */
    public final TableField<TOrderRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "姓名");

    /**
     * The column <code>ds.t_order.user_id</code>. 用户id
     */
    public final TableField<TOrderRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "用户id");

    /**
     * The column <code>ds.t_order.create_at</code>. 创建时间
     */
    public final TableField<TOrderRecord, Timestamp> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "创建时间");

    /**
     * The column <code>ds.t_order.update_at</code>. 更新时间
     */
    public final TableField<TOrderRecord, Timestamp> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * The column <code>ds.t_order.version</code>. 版本号
     */
    public final TableField<TOrderRecord, String> VERSION = createField("version", org.jooq.impl.SQLDataType.VARCHAR(255), this, "版本号");

    /**
     * The column <code>ds.t_order.del_flag</code>. 删除标记
     */
    public final TableField<TOrderRecord, Boolean> DEL_FLAG = createField("del_flag", org.jooq.impl.SQLDataType.BIT, this, "删除标记");

    /**
     * Create a <code>ds.t_order</code> table reference
     */
    public TOrder() {
        this(DSL.name("t_order"), null);
    }

    /**
     * Create an aliased <code>ds.t_order</code> table reference
     */
    public TOrder(String alias) {
        this(DSL.name(alias), T_ORDER);
    }

    /**
     * Create an aliased <code>ds.t_order</code> table reference
     */
    public TOrder(Name alias) {
        this(alias, T_ORDER);
    }

    private TOrder(Name alias, Table<TOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private TOrder(Name alias, Table<TOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("订单"));
    }

    public <O extends Record> TOrder(Table<O> child, ForeignKey<O, TOrderRecord> key) {
        super(child, key, T_ORDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ds.DS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TOrderRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_ORDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TOrderRecord> getPrimaryKey() {
        return Keys.KEY_T_ORDER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<TOrderRecord>>asList(Keys.KEY_T_ORDER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrder as(String alias) {
        return new TOrder(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TOrder as(Name alias) {
        return new TOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrder rename(String name) {
        return new TOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TOrder rename(Name name) {
        return new TOrder(name, null);
    }
}
